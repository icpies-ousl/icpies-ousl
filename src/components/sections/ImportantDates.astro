---
interface DateItem {
  event: string;
  date: string;
  isPassed?: boolean;
  isHighlighted?: boolean;
  icon?: string; // Optional icon name for events
}

interface Props {
  title: string;
  subtitle?: string;
  dates: DateItem[];
}

const { title, subtitle, dates } = Astro.props;

// Helper to check if a date has passed
const isDatePassed = (dateStr: string) => {
  const today = new Date();
  const itemDate = new Date(dateStr);
  return today > itemDate;
};

// Process dates and add status
const processedDates = dates.map(date => ({
  ...date,
  isPassed: date.isPassed !== undefined ? date.isPassed : isDatePassed(date.date)
}));

// Sort dates chronologically
const sortedDates = [...processedDates].sort((a, b) => {
  return new Date(a.date).getTime() - new Date(b.date).getTime();
});

// Format date for display (10th March 2025 format)
const formatDateWithSuffix = (dateStr: string) => {
  const date = new Date(dateStr);
  const day = date.getDate();

  // Add suffix to day (st, nd, rd, th)
  const suffix =
    day % 10 === 1 && day !== 11 ? 'st' :
    day % 10 === 2 && day !== 12 ? 'nd' :
    day % 10 === 3 && day !== 13 ? 'rd' : 'th';

  return date.toLocaleDateString('en-US', {
    day: 'numeric',
    month: 'long',
    year: 'numeric'
  }).replace(/\d+/, day + suffix);
};

// Format short date
const formatShortDate = (dateStr: string) => {
  const date = new Date(dateStr);
  return date.toLocaleDateString('en-US', {
    day: '2-digit',
    month: 'short'
  });
};

// Get event type based on event name
const getEventType = (eventName: string) => {
  if (eventName.includes("Camera-ready") || eventName.includes("Early Bird") || eventName.includes("Registration Deadline")) {
    return "physical";
  }
  return "standard";
};

// Calculate progress percentage
const calculateProgress = () => {
  if (sortedDates.length <= 1) return 100;

  const firstDate = new Date(sortedDates[0].date).getTime();
  const lastDate = new Date(sortedDates[sortedDates.length - 1].date).getTime();
  const today = new Date().getTime();

  if (today <= firstDate) return 0;
  if (today >= lastDate) return 100;

  return Math.floor(((today - firstDate) / (lastDate - firstDate)) * 100);
};

const progressPercentage = calculateProgress();
---

<section class="timeline-section py-10 px-4 sm:px-6 lg:px-8 bg-white dark:bg-gray-900" id="important-dates">
  <div class="max-w-6xl mx-auto">
    <!-- Simple header -->
    <div class="text-center mb-10">
      <h2 class="text-2xl md:text-3xl font-semibold text-gray-800 dark:text-white mb-3">{title}</h2>

      {subtitle &&
        <p class="text-base text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
          {subtitle}
        </p>
      }
    </div>

    <!-- Simple legend -->
    <div class="flex justify-center gap-6 mb-8 text-sm">
      <div class="flex items-center gap-2">
        <div class="w-3 h-3 rounded-full bg-indigo-500"></div>
        <span class="text-gray-600 dark:text-gray-300">Upcoming</span>
      </div>
      <div class="flex items-center gap-2">
        <div class="w-3 h-3 rounded-full bg-amber-500"></div>
        <span class="text-gray-600 dark:text-gray-300">Current Focus</span>
      </div>
      <div class="flex items-center gap-2">
        <div class="w-3 h-3 rounded-full bg-gray-300 dark:bg-gray-600"></div>
        <span class="text-gray-600 dark:text-gray-300">Past</span>
      </div>
    </div>

    <!-- Clean horizontal timeline -->
    <div class="timeline-wrapper relative mt-12 mb-8 overflow-hidden">
      <!-- Progress bar -->
      <div class="absolute w-full h-0.5 top-9 bg-gray-200 dark:bg-gray-700 z-0">
        <div class="h-full bg-indigo-500 dark:bg-indigo-400" style={`width: ${progressPercentage}%`}></div>
      </div>

      <!-- Timeline nodes -->
      <div class="timeline-nodes relative flex min-w-max overflow-x-auto hide-scrollbar py-4 px-2">
        {sortedDates.map((dateItem, index) => {
          const eventType = getEventType(dateItem.event);
          const isHighlighted = dateItem.isHighlighted;
          const isPassed = dateItem.isPassed;

          return (
            <div class="timeline-node relative mx-4 first:ml-2 last:mr-2" style="min-width: 160px; max-width: 160px;">
              <!-- Node point -->
              <div class={`absolute left-1/2 top-5 w-4 h-4 rounded-full z-10 -translate-x-1/2 -translate-y-1/2 ${
                isPassed
                  ? 'bg-gray-300 dark:bg-gray-600'
                  : isHighlighted
                    ? 'bg-amber-500 dark:bg-amber-400'
                    : 'bg-indigo-500 dark:bg-indigo-400'
              }`}></div>

              <!-- Date above the line -->
              <div class="text-center mb-8">
                <span class={`text-sm font-medium ${
                  isPassed
                    ? 'text-gray-500 dark:text-gray-400'
                    : isHighlighted
                      ? 'text-amber-600 dark:text-amber-400'
                      : 'text-indigo-600 dark:text-indigo-400'
                }`}>
                  {formatShortDate(dateItem.date)}
                </span>
              </div>

              <!-- Event card below the line -->
              <div class={`mt-6 p-3 border rounded shadow-sm transition ${
                isPassed
                  ? 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700'
                  : isHighlighted
                    ? 'bg-white dark:bg-gray-800 border-amber-200 dark:border-amber-700'
                    : 'bg-white dark:bg-gray-800 border-indigo-200 dark:border-indigo-700'
              }`}>
                <h3 class={`text-sm font-medium mb-1 ${
                  isPassed
                    ? 'text-gray-500 dark:text-gray-400'
                    : isHighlighted
                      ? 'text-amber-700 dark:text-amber-300'
                      : 'text-indigo-700 dark:text-indigo-300'
                }`}>
                  {dateItem.event}
                </h3>
                <p class="text-xs text-gray-500 dark:text-gray-400">
                  {formatDateWithSuffix(dateItem.date)}
                </p>

                {!isPassed && (
                  <div class="mt-2">
                    {eventType === "physical" && (
                      <span class="inline-block px-2 py-0.5 bg-indigo-50 dark:bg-indigo-900/20 text-indigo-600 dark:text-indigo-300 text-xs rounded">
                        Event
                      </span>
                    )}
                    {isHighlighted && eventType !== "physical" && (
                      <span class="inline-block px-2 py-0.5 bg-amber-50 dark:bg-amber-900/20 text-amber-600 dark:text-amber-300 text-xs rounded">
                        Current
                      </span>
                    )}
                  </div>
                )}
              </div>
            </div>
          );
        })}
      </div>

      <!-- Scroll indicators -->
      <div class="absolute left-0 top-0 bottom-0 w-8 bg-gradient-to-r from-white dark:from-gray-900 to-transparent pointer-events-none"></div>
      <div class="absolute right-0 top-0 bottom-0 w-8 bg-gradient-to-l from-white dark:from-gray-900 to-transparent pointer-events-none"></div>
    </div>

    <!-- Mobile view toggle -->
    <div class="md:hidden text-center mt-6">
      <button class="view-all-btn px-4 py-2 bg-gray-100 dark:bg-gray-800 border border-gray-300 dark:border-gray-700 text-gray-700 dark:text-gray-300 rounded-md">
        View All Dates
      </button>
    </div>

    <!-- Mobile list view -->
    <div class="md:hidden mobile-dates-list mt-8 hidden space-y-3">
      {sortedDates.map((dateItem) => {
        const eventType = getEventType(dateItem.event);
        const isHighlighted = dateItem.isHighlighted;
        const isPassed = dateItem.isPassed;

        return (
          <div class={`p-3 border rounded shadow-sm ${
            isPassed
              ? 'border-gray-200 dark:border-gray-700'
              : isHighlighted
                ? 'border-amber-200 dark:border-amber-700'
                : 'border-indigo-200 dark:border-indigo-700'
          }`}>
            <div class="flex justify-between">
              <div>
                <h3 class={`font-medium ${
                  isPassed
                    ? 'text-gray-500 dark:text-gray-400'
                    : isHighlighted
                      ? 'text-amber-700 dark:text-amber-300'
                      : 'text-indigo-700 dark:text-indigo-300'
                }`}>
                  {dateItem.event}
                </h3>
                <p class="text-sm text-gray-500 dark:text-gray-400">
                  {formatDateWithSuffix(dateItem.date)}
                </p>
              </div>
              <div class={`flex-shrink-0 ml-4 w-12 h-12 rounded-full flex items-center justify-center ${
                isPassed
                  ? 'bg-gray-100 dark:bg-gray-800 text-gray-500 dark:text-gray-400'
                  : isHighlighted
                    ? 'bg-amber-50 dark:bg-amber-900/20 text-amber-700 dark:text-amber-300'
                    : 'bg-indigo-50 dark:bg-indigo-900/20 text-indigo-700 dark:text-indigo-300'
              }`}>
                <div class="text-center">
                  <span class="text-lg font-bold">{new Date(dateItem.date).getDate()}</span>
                  <span class="block text-xs uppercase">{new Date(dateItem.date).toLocaleDateString('en-US', { month: 'short' })}</span>
                </div>
              </div>
            </div>

            {!isPassed && (
              <div class="mt-2">
                {eventType === "physical" && (
                  <span class="inline-block px-2 py-0.5 bg-indigo-50 dark:bg-indigo-900/20 text-indigo-600 dark:text-indigo-300 text-xs rounded">
                    Event
                  </span>
                )}
                {isHighlighted && eventType !== "physical" && (
                  <span class="inline-block px-2 py-0.5 bg-amber-50 dark:bg-amber-900/20 text-amber-600 dark:text-amber-300 text-xs rounded">
                    Current
                  </span>
                )}
              </div>
            )}
          </div>
        );
      })}

      <div class="text-center mt-4">
        <button class="hide-all-btn px-4 py-2 bg-gray-100 dark:bg-gray-800 border border-gray-300 dark:border-gray-700 text-gray-700 dark:text-gray-300 rounded-md">
          Return to Timeline
        </button>
      </div>
    </div>
  </div>
</section>

<style>
  /* Hide scrollbar but keep functionality */
  .hide-scrollbar {
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE/Edge */
  }

  .hide-scrollbar::-webkit-scrollbar {
    display: none; /* Chrome, Safari, Opera */
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Mobile view toggle
    const viewAllBtn = document.querySelector('.view-all-btn');
    const hideAllBtn = document.querySelector('.hide-all-btn');
    const timelineWrapper = document.querySelector('.timeline-wrapper');
    const mobileList = document.querySelector('.mobile-dates-list');

    if (viewAllBtn && hideAllBtn && timelineWrapper && mobileList) {
      viewAllBtn.addEventListener('click', function() {
        timelineWrapper.classList.add('hidden');
        viewAllBtn.classList.add('hidden');
        mobileList.classList.remove('hidden');
      });

      hideAllBtn.addEventListener('click', function() {
        timelineWrapper.classList.remove('hidden');
        viewAllBtn.classList.remove('hidden');
        mobileList.classList.add('hidden');
      });
    }

    // Scroll to upcoming events
    const timelineNodes = document.querySelector('.timeline-nodes');
    if (timelineNodes) {
      // Find the closest upcoming event
      const today = new Date().getTime();
      const nodes = document.querySelectorAll('.timeline-node');
      let closestUpcoming = null;
      let closestDiff = Infinity;

      nodes.forEach(node => {
        const dateText = node.querySelector('.text-sm.font-medium').textContent.trim();
        const monthYear = dateText.split(' ');
        // Create a rough date from the text (precision doesn't matter, just need approximate)
        const nodeDate = new Date(`${monthYear[0]} 1, ${new Date().getFullYear()}`).getTime();
        const diff = nodeDate - today;

        // Find the event closest to today but in the future
        if (diff > 0 && diff < closestDiff) {
          closestDiff = diff;
          closestUpcoming = node;
        }
      });

      // Scroll to the upcoming event or center the timeline
      setTimeout(() => {
        if (closestUpcoming) {
          // Get node position and scroll to it
          const nodeRect = closestUpcoming.getBoundingClientRect();
          const containerRect = timelineNodes.getBoundingClientRect();
          timelineNodes.scrollLeft = closestUpcoming.offsetLeft - containerRect.width / 2 + nodeRect.width / 2;
        } else {
          // Default: center the timeline
          const scrollWidth = timelineNodes.scrollWidth;
          timelineNodes.scrollLeft = (scrollWidth - timelineNodes.clientWidth) / 2;
        }
      }, 300);

      // Basic horizontal scroll with mouse wheel
      timelineNodes.addEventListener('wheel', function(e) {
        if (e.deltaY !== 0) {
          e.preventDefault();
          this.scrollLeft += e.deltaY;
        }
      });
    }
  });
</script>
