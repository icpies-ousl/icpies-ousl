---
interface Topic {
  name: string;
  icon?: string;
}

interface Track {
  title: string;
  subtitle: string;
  image: string;
  description: string;
  topics?: string[];
  color?: string;
}

interface Props {
  title: string;
  subtitle?: string;
  description?: string;
  tracks: Track[];
  viewAllLink?: string;
}

const { title, subtitle, description, tracks, viewAllLink } = Astro.props;

// Define a set of colors for track cards if not specified
const defaultColors = [
  '#1A7A64', '#2E5EAA', '#9B4D85', '#D66853',
  '#2B8C67', '#5E6CA2', '#946B2D', '#466365'
];

// Icons for topics (using Heroicons)
const topicIcons = {
  "Microplastic": "microscope",
  "Detection": "magnifying-glass",
  "Recycling": "arrow-path",
  "Waste": "trash",
  "Policy": "document-text",
  "Climate": "globe-alt",
  "Technology": "cpu-chip",
  "Ecosystem": "sparkles",
  "Material": "beaker",
  "Education": "academic-cap",
  "AI": "chip",
  "Machine Learning": "variable",
  "Digital": "computer-desktop",
  "Environmental": "sun",
  "Health": "heart",
  "Biodegradable": "leaf",
  "Innovation": "light-bulb",
  "Sustainable": "check-badge",
  "Smart": "bolt",
  "Monitoring": "eye",
  "Modeling": "chart-bar",
  "Circular": "arrow-path",
};

function getIconForTopic(topic: string): string {
  for (const [key, value] of Object.entries(topicIcons)) {
    if (topic.toLowerCase().includes(key.toLowerCase())) {
      return value;
    }
  }
  return "tag"; // Default icon
}
---

<div class="py-20" id="conference-tracks">
  <div class="max-w-6xl mx-auto px-4">
    <!-- Standardized title styling across components -->
    <div class="text-center mb-16">
      <h2 class="text-[2.13rem] leading-9 font-semibold mb-6 text-[#2C3E50]">
        {title}
      </h2>

      <!-- Using the standardized gradient divider -->
      <div class="w-32 h-1 bg-gradient-to-r from-[#1A7A64] to-[#4ECDC4] rounded-full mx-auto mb-6"></div>

      {subtitle &&
        <p class="text-xl text-[#2C3E50]/80 mb-4 font-medium">
          {subtitle}
        </p>
      }

      {description &&
        <p class="max-w-3xl mx-auto text-[#2C3E50]/70 leading-relaxed">
          {description}
        </p>
      }
    </div>

    <div class="space-y-4">
      {tracks.map((track, index) => (
        <div class="flex flex-col md:flex-row items-center gap-4 p-4 bg-white rounded-xl shadow-sm transition-all duration-300 hover:shadow-md border border-gray-100 group">
          <!-- Left side with circular number and image -->
          <div class="flex-shrink-0 relative">
            <!-- Circular background with image -->
            <div class="w-16 h-16 md:w-20 md:h-20 rounded-full overflow-hidden border-3" style={`border-color: ${track.color || defaultColors[index % defaultColors.length]}`}>
              <img
                src={track.image}
                alt={track.title}
                class="w-full h-full object-cover"
                loading="lazy"
              />
            </div>

            <!-- Track number badge -->
            <div
              class="absolute -top-2 -right-2 w-8 h-8 rounded-full flex items-center justify-center text-white font-bold text-lg shadow-sm"
              style={`background-color: ${track.color || defaultColors[index % defaultColors.length]}`}
            >
              {index + 1}
            </div>
          </div>

          <!-- Right side with track details -->
          <div class="flex-1 flex flex-col md:flex-row md:items-center">
            <div class="md:flex-1">
              <h3 class="text-lg font-bold text-center md:text-left"
                  style={`color: ${track.color || defaultColors[index % defaultColors.length]}`}>
                {track.title}
              </h3>

              {track.subtitle && (
                <p class="text-sm font-medium text-gray-500 mb-0 text-center md:text-left">
                  {track.subtitle}
                </p>
              )}
            </div>

            {track.topics && track.topics.length > 0 && (
              <div class="hidden md:flex flex-wrap gap-2 mt-2 md:mt-0 md:justify-end">
                {track.topics.slice(0, 2).map((topic) => (
                  <span
                    class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium transition-all duration-300 hover:shadow-sm"
                    style={`background-color: ${track.color || defaultColors[index % defaultColors.length]}20; color: ${track.color || defaultColors[index % defaultColors.length]}`}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={
                        topic.toLowerCase().includes("micro") ? "M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" :
                        topic.toLowerCase().includes("recycl") ? "M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" :
                        topic.toLowerCase().includes("polic") ? "M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" :
                        "M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"
                      } />
                    </svg>
                    {topic}
                  </span>
                ))}
                {track.topics.length > 2 && (
                  <span
                    class="inline-flex items-center px-2 py-0.5 rounded-full text-xs bg-gray-100 text-gray-600 font-medium cursor-pointer hover:bg-gray-200 transition-all duration-300"
                  >
                    +{track.topics.length - 2} more
                  </span>
                )}
              </div>
            )}
          </div>

          <!-- Right side arrow for mobile -->
          <div class="flex md:hidden items-center justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          </div>

          <!-- Right side arrow for desktop -->
          <div class="hidden md:flex items-center justify-center">
            <div class="w-8 h-8 rounded-full flex items-center justify-center bg-gray-100 group-hover:bg-gray-200 transition-colors duration-300">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
              </svg>
            </div>
          </div>
        </div>
      ))}
    </div>

    {viewAllLink && (
      <div class="text-center mt-12">
        <a
          href={viewAllLink}
          class="inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-[#1A7A64] to-[#4ECDC4] text-white font-medium rounded-lg transition-all duration-300 hover:shadow-lg hover:shadow-[#1A7A64]/30 transform hover:-translate-y-1"
        >
          View All Tracks
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </a>
      </div>
    )}
  </div>
</div>

<style>
  /* Group hover effects */
  .group {
    position: relative;
    cursor: pointer;
  }

  .group::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.3s ease;
  }

  .group:hover::after {
    transform: scaleX(1);
  }

  .group:nth-child(1)::after { background-color: #1A7A64; }
  .group:nth-child(2)::after { background-color: #2E5EAA; }
  .group:nth-child(3)::after { background-color: #9B4D85; }
  .group:nth-child(4)::after { background-color: #D66853; }
  .group:nth-child(5)::after { background-color: #2B8C67; }
  .group:nth-child(6)::after { background-color: #5E6CA2; }
  .group:nth-child(7)::after { background-color: #946B2D; }
  .group:nth-child(8)::after { background-color: #466365; }

  /* Smaller border width */
  .border-3 {
    border-width: 3px;
  }
</style>
