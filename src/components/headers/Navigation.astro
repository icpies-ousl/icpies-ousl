---
import { Image } from "astro:assets";
import { getLocalizedSettings } from "@/lib/localization-helpers";
import { translatePath, unlocalizedUrl } from "@/lib/localization-helpers";
import { defaultLocale, locales } from "site";
import Logo from "/src/assets/pages/homepage/icpies_logo.png";

const currentLocale = Astro.currentLocale;

function getTranslatedUrl(locale: string): string {
    const unlocalizedPath = unlocalizedUrl(Astro.url.pathname);
    return translatePath(locale, unlocalizedPath);
}

function isActiveLocale(locale: string): boolean {
    return locale === currentLocale;
}

const { header, contacts } = getLocalizedSettings(currentLocale);

// Define the navigation items
const navItems = [
  { title: "Home", link: "/" },
  { title: "About ICPIES", link: "/about" },
  { title: "Important Dates", link: "/important-dates" },
  { title: "Conference Tracks", link: "/conference-tracks" },
  { title: "Submissions", link: "/submissions" },
  { title: "Contact Us", link: "/contact" },
  { title: "Keynotes", link: "/keynotes" },
  { title: "Committee", link: "/committee" }
];

// Determine current page for active state
const currentPath = Astro.url.pathname;
---

<header class="fixed w-full z-30 bg-white/95 backdrop-blur-sm shadow-sm">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Top navigation bar with logo and menu -->
    <div class="flex items-center justify-between h-20">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a href={translatePath(currentLocale ?? defaultLocale, "/")} class="flex items-center">
          <Image
            src={Logo}
            alt="ICPIES 2025 Logo"
            class="h-14 w-auto"
            width={160}
            height={160}
          />
          <!-- <div class="ml-3 hidden sm:block">
            <h1 class="text-xl font-semibold text-[#2C3E50]">ICPIES 2025</h1>
            <p class="text-xs text-[#2C3E50]/70">International Conference on Plastics, Innovation, and Environmental Sustainability</p>
          </div> -->
        </a>
      </div>

      <!-- Desktop Navigation -->
      <nav class="hidden lg:flex items-center space-x-1">
        {navItems.map((item) => {
          const isActive = currentPath === item.link ||
                         (item.link !== '/' && currentPath.startsWith(item.link));
          return (
            <a
              href={translatePath(currentLocale ?? defaultLocale, item.link)}
              class:list={[
                "px-3 py-2 rounded-md text-sm font-medium transition-colors duration-300",
                isActive
                  ? "text-[#1A7A64] border-b-2 border-[#1A7A64]"
                  : "text-gray-700 hover:text-[#1A7A64] hover:bg-gray-50"
              ]}
              aria-current={isActive ? "page" : undefined}
            >
              {item.title}
            </a>
          );
        })}

        <!-- Language switcher for desktop -->
        <div class="relative ml-4">
          <button
            type="button"
            class="flex items-center text-sm font-medium text-gray-700 hover:text-[#1A7A64] focus:outline-none"
            id="language-menu-button"
            aria-expanded="false"
            aria-haspopup="true"
          >
            <span>{currentLocale?.toUpperCase()}</span>
            <svg class="ml-1 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
              <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd" />
            </svg>
          </button>

          <!-- Language dropdown menu -->
          <div
            class="hidden absolute right-0 z-10 mt-2 w-40 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
            id="language-menu"
            role="menu"
            aria-orientation="vertical"
            aria-labelledby="language-menu-button"
            tabindex="-1"
          >
            {
              locales.map((locale) => (
                <a
                  href={getTranslatedUrl(locale)}
                  class:list={[
                    "block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100",
                    isActiveLocale(locale) && "font-bold text-[#1A7A64] bg-gray-50"
                  ]}
                  role="menuitem"
                  tabindex="-1"
                >
                  {locale.toUpperCase()}
                </a>
              ))
            }
          </div>
        </div>
      </nav>

      <!-- Mobile menu button -->
      <div class="flex lg:hidden">
        <button
          type="button"
          id="mobile-menu-button"
          class="inline-flex items-center justify-center p-2 rounded-md text-gray-700 hover:text-[#1A7A64] hover:bg-gray-100 focus:outline-none"
          aria-controls="mobile-menu"
          aria-expanded="false"
        >
          <span class="sr-only">Open main menu</span>
          <!-- Menu open icon -->
          <svg id="menu-open-icon" class="block h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
          <!-- Menu close icon -->
          <svg id="menu-close-icon" class="hidden h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu, show/hide based on menu state -->
  <div class="lg:hidden hidden transition-all duration-300 ease-in-out" id="mobile-menu">
    <div class="px-2 pt-2 pb-3 space-y-1 bg-white border-t shadow-lg">
      {navItems.map((item) => {
        const isActive = currentPath === item.link ||
                       (item.link !== '/' && currentPath.startsWith(item.link));
        return (
          <a
            href={translatePath(currentLocale ?? defaultLocale, item.link)}
            class:list={[
              "block px-3 py-2 rounded-md text-base font-medium",
              isActive
                ? "text-white bg-[#1A7A64]"
                : "text-gray-700 hover:bg-gray-50 hover:text-[#1A7A64]"
            ]}
            aria-current={isActive ? "page" : undefined}
          >
            {item.title}
          </a>
        );
      })}

      <!-- Language switcher for mobile -->
      <div class="pt-4 pb-3 border-t border-gray-200">
        <div class="px-3">
          <p class="text-sm font-medium text-gray-500">Language</p>
        </div>
        <div class="mt-2 space-y-1">
          {
            locales.map((locale) => (
              <a
                href={getTranslatedUrl(locale)}
                class:list={[
                  "block px-3 py-2 rounded-md text-base font-medium",
                  isActiveLocale(locale)
                    ? "bg-gray-50 text-[#1A7A64]"
                    : "text-gray-700 hover:bg-gray-50 hover:text-[#1A7A64]"
                ]}
              >
                {locale.toUpperCase()}
              </a>
            ))
          }
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  // Handle mobile menu toggle
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuOpenIcon = document.getElementById('menu-open-icon');
    const menuCloseIcon = document.getElementById('menu-close-icon');

    mobileMenuButton?.addEventListener('click', () => {
      // Toggle menu visibility
      mobileMenu?.classList.toggle('hidden');

      // Toggle between menu icons
      menuOpenIcon?.classList.toggle('hidden');
      menuCloseIcon?.classList.toggle('hidden');
    });
  });

  // Handle language menu toggle
  document.addEventListener('DOMContentLoaded', () => {
    const languageMenuButton = document.getElementById('language-menu-button');
    const languageMenu = document.getElementById('language-menu');

    languageMenuButton?.addEventListener('click', () => {
      languageMenu?.classList.toggle('hidden');
    });

    // Close menu when clicking outside
    document.addEventListener('click', (event) => {
      if (!languageMenuButton?.contains(event.target as Node) &&
          !languageMenu?.contains(event.target as Node)) {
        languageMenu?.classList.add('hidden');
      }
    });
  });

  // Close mobile menu on window resize
  window.addEventListener('resize', () => {
    if (window.innerWidth >= 1024) {
      const mobileMenu = document.getElementById('mobile-menu');
      const menuOpenIcon = document.getElementById('menu-open-icon');
      const menuCloseIcon = document.getElementById('menu-close-icon');

      mobileMenu?.classList.add('hidden');
      menuOpenIcon?.classList.remove('hidden');
      menuCloseIcon?.classList.add('hidden');
    }
  });

  // Handle scroll behavior
  window.addEventListener('scroll', () => {
    const header = document.querySelector('header');
    if (window.scrollY > 20) {
      header?.classList.add('shadow');
    } else {
      header?.classList.remove('shadow');
    }
  });
</script>

<style>
  /* Smooth transition for navigation highlights */
  header a {
    transition: all 0.2s ease-in-out;
  }

  /* Add space below header to prevent content from being hidden */
  header + * {
    padding-top: 5rem;
  }

  /* Shadow transition for header on scroll */
  header {
    transition: box-shadow 0.3s ease;
  }

  header.shadow {
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  /* Active menu link effect */
  nav a[aria-current="page"] {
    position: relative;
  }

  /* Mobile menu animation */
  #mobile-menu {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-in-out;
  }

  #mobile-menu.hidden {
    max-height: 0;
  }

  #mobile-menu:not(.hidden) {
    max-height: 600px;
  }
</style>
