---
import BaseLayout from "@/layouts/BaseLayout.astro";

// Define your conference dates directly in the page
const conferenceDates = [
  {event: "Call for Abstracts", date: "2025-03-15", isPassed: false, isHighlighted: true},
  {event: "Deadline for Abstracts Submission", date: "2025-04-04", isPassed: false, isHighlighted: false},
  {event: "Notification of Acceptance", date: "2025-05-02", isPassed: false},
  {event: "Deadline for Selected Full Papers Submission", date: "2025-06-06", isPassed: false, isHighlighted: false},
  {event: "Camera-ready Copy Submission", date: "2025-06-20", isPassed: false, isHighlighted: false},
  {event: "Early Bird Registration", date: "2025-07-06", isPassed: false, isHighlighted: false},
  {event: "Registration Deadline", date: "2025-07-18", isPassed: false, isHighlighted: false},
];

// Helper to check if a date has passed
const isDatePassed = (dateStr: string) => {
  const today = new Date();
  const itemDate = new Date(dateStr);
  return today > itemDate;
};

// Process dates and add status
const processedDates = conferenceDates.map(date => ({
  ...date,
  isPassed: date.isPassed !== undefined ? date.isPassed : isDatePassed(date.date)
}));

// Sort dates chronologically
const sortedDates = [...processedDates].sort((a, b) => {
  return new Date(a.date).getTime() - new Date(b.date).getTime();
});

// Format date for display
const formatDateWithSuffix = (dateStr: string) => {
  try {
    const date = new Date(dateStr);
    if (isNaN(date.getTime())) return dateStr;

    const day = date.getDate();
    const suffix = day % 10 === 1 && day !== 11 ? 'st' : day % 10 === 2 && day !== 12 ? 'nd' : day % 10 === 3 && day !== 13 ? 'rd' : 'th';
    return date.toLocaleDateString('en-US', { day: 'numeric', month: 'long', year: 'numeric' }).replace(/\d+/, day + suffix);
  } catch (e) {
    console.error("Error formatting date:", e);
    return dateStr;
  }
};

// Format short date
const formatShortDate = (dateStr: string) => {
  try {
    const date = new Date(dateStr);
    if (isNaN(date.getTime())) return dateStr;
    return date.toLocaleDateString('en-US', { day: '2-digit', month: 'short' });
  } catch (e) {
    console.error("Error formatting short date:", e);
    return dateStr;
  }
};

// Get event type based on event name
const getEventType = (eventName: string) => {
  if (!eventName) return "standard";
  if (eventName.includes("Camera-ready") || eventName.includes("Early Bird") || eventName.includes("Registration")) {
    return "physical";
  }
  return "standard";
};

// Calculate progress percentage
const calculateProgress = () => {
  if (sortedDates.length <= 1) return 100;
  const firstDate = new Date(sortedDates[0].date).getTime();
  const lastDate = new Date(sortedDates[sortedDates.length - 1].date).getTime();
  const today = new Date().getTime();
  if (today <= firstDate) return 0;
  if (today >= lastDate) return 100;
  return Math.floor(((today - firstDate) / (lastDate - firstDate)) * 100);
};

const progressPercentage = calculateProgress();

// Find today's closest event
const findCurrentEventIndex = () => {
  const today = new Date().getTime();
  for (let i = 0; i < sortedDates.length; i++) {
    if (new Date(sortedDates[i].date).getTime() > today) {
      return i === 0 ? 0 : i - 1;
    }
  }
  return sortedDates.length - 1;
};

const currentEventIndex = findCurrentEventIndex();

// If there are no dates, we'll show a placeholder message
const hasData = sortedDates.length > 0;

// SEO props for the page
const seo = {
  title: "Important Dates | ICPIES Conference",
  description: "Important dates and deadlines for ICPIES 2025 conference submissions and registration."
};
---

<BaseLayout seo={seo}>
  <main class="py-16 md:py-24">
    <div class="max-w-5xl mx-auto px-4">
      <h1 class="text-3xl md:text-4xl font-bold text-center mb-6">Important Conference Dates</h1>
      <p class="text-lg text-center text-gray-600 dark:text-gray-300 mb-10 max-w-2xl mx-auto">
        Mark your calendar for these key deadlines to ensure you don't miss any important submission dates.
      </p>

      <section class="timeline-section py-6 px-4 bg-white dark:bg-gray-900 rounded-xl shadow-sm" id="important-dates">
        <div class="max-w-5xl mx-auto">
          {hasData ? (
            <>
              <!-- Status indicators -->
              <div class="flex justify-center gap-4 mb-4 text-xs">
                <div class="flex items-center gap-1.5">
                  <div class="w-2.5 h-2.5 rounded-full bg-gray-300 dark:bg-gray-600"></div>
                  <span class="text-gray-600 dark:text-gray-400">Past</span>
                </div>
                <div class="flex items-center gap-1.5">
                  <div class="w-2.5 h-2.5 rounded-full bg-amber-500"></div>
                  <span class="text-gray-600 dark:text-gray-400">Current</span>
                </div>
                <div class="flex items-center gap-1.5">
                  <div class="w-2.5 h-2.5 rounded-full bg-indigo-500"></div>
                  <span class="text-gray-600 dark:text-gray-400">Upcoming</span>
                </div>
              </div>

              <!-- Improved horizontal timeline -->
              <div class="timeline-container relative mt-8 mb-4">
                <!-- Progress bar track -->
                <div class="absolute w-full h-1 top-2.5 bg-gray-200 dark:bg-gray-700 z-0 rounded-full overflow-hidden">
                  <div class="h-full bg-indigo-500 dark:bg-indigo-400 transition-all duration-500" style={`width: ${progressPercentage}%`}></div>
                </div>

                <!-- Timeline markers and events -->
                <div class="timeline-scroll relative flex overflow-x-auto hide-scrollbar py-1 px-2 pb-6 snap-x snap-mandatory" id="timeline-scroll">
                  {sortedDates.map((dateItem, index) => {
                    const eventType = getEventType(dateItem.event);
                    const isHighlighted = dateItem.isHighlighted;
                    const isPassed = dateItem.isPassed;
                    const isCurrent = index === currentEventIndex && !isPassed;

                    // Calculate event width - important events get more space
                    const baseWidth = isHighlighted ? 120 : 100;

                    return (
                      <div class={`timeline-node relative mx-1.5 first:ml-0 last:mr-0 snap-center`} style={`min-width: ${baseWidth}px; max-width: ${baseWidth}px;`}>
                        <!-- Marker dot -->
                        <div class={`absolute left-1/2 top-2.5 w-5 h-5 rounded-full z-10 -translate-x-1/2 -translate-y-1/2 flex items-center justify-center
                          ${isPassed
                            ? 'bg-gray-300 dark:bg-gray-600'
                            : isCurrent
                              ? 'bg-amber-500 dark:bg-amber-400 ring-4 ring-amber-100 dark:ring-amber-900/30'
                              : 'bg-indigo-500 dark:bg-indigo-400'
                          }`}>
                          {isCurrent && (
                            <div class="animate-ping absolute inline-flex h-3 w-3 rounded-full bg-amber-400 opacity-75"></div>
                          )}
                        </div>

                        <!-- Date label -->
                        <div class="text-center mt-8 mb-1">
                          <span class={`text-xs font-semibold uppercase tracking-wide ${
                            isPassed
                              ? 'text-gray-500 dark:text-gray-400'
                              : isCurrent
                                ? 'text-amber-600 dark:text-amber-400'
                                : 'text-indigo-600 dark:text-indigo-400'
                          }`}>
                            {formatShortDate(dateItem.date)}
                          </span>
                        </div>

                        <!-- Event card -->
                        <div class={`mt-1 p-2 rounded-lg shadow-sm border border-l-2 transition-transform hover:translate-y-[-2px] ${
                          isPassed
                            ? 'bg-white dark:bg-gray-800/50 border-l-gray-300 dark:border-l-gray-600 border-gray-200 dark:border-gray-700'
                            : isCurrent
                              ? 'bg-white dark:bg-gray-800/70 border-l-amber-400 dark:border-l-amber-500 border-amber-200 dark:border-amber-800/50 shadow-md'
                              : 'bg-white dark:bg-gray-800/50 border-l-indigo-400 dark:border-l-indigo-500 border-indigo-200 dark:border-indigo-800/50'
                          }`}
                        >
                          <h3 class={`text-xs font-medium leading-tight ${
                            isPassed
                              ? 'text-gray-500 dark:text-gray-400'
                              : isCurrent
                                ? 'text-amber-700 dark:text-amber-300'
                                : 'text-indigo-700 dark:text-indigo-300'
                          }`}>
                            {dateItem.event}
                          </h3>
                          <p class="text-[10px] text-gray-500 dark:text-gray-400 mt-1 truncate" title={formatDateWithSuffix(dateItem.date)}>
                            {formatDateWithSuffix(dateItem.date)}
                          </p>

                          {!isPassed && eventType === "physical" && (
                            <div class="mt-1.5">
                              <span class="inline-block px-1.5 py-0.5 bg-indigo-50 dark:bg-indigo-900/30 text-indigo-600 dark:text-indigo-300 text-[8px] font-medium rounded-full">
                                Event
                              </span>
                            </div>
                          )}
                        </div>
                      </div>
                    );
                  })}
                </div>

                <!-- Elegant scroll indicators -->
                <div class="absolute left-0 top-0 bottom-0 w-8 bg-gradient-to-r from-white dark:from-gray-900 to-transparent pointer-events-none z-10"></div>
                <div class="absolute right-0 top-0 bottom-0 w-8 bg-gradient-to-l from-white dark:from-gray-900 to-transparent pointer-events-none z-10"></div>

                <!-- Scroll buttons -->
                <button id="scroll-left" class="absolute left-0 top-1/2 -translate-y-1/2 z-20 w-6 h-6 flex items-center justify-center rounded-full bg-white dark:bg-gray-800 shadow-md text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors border border-gray-200 dark:border-gray-700">
                  <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M15 18l-6-6 6-6" />
                  </svg>
                </button>
                <button id="scroll-right" class="absolute right-0 top-1/2 -translate-y-1/2 z-20 w-6 h-6 flex items-center justify-center rounded-full bg-white dark:bg-gray-800 shadow-md text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors border border-gray-200 dark:border-gray-700">
                  <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M9 18l6-6-6-6" />
                  </svg>
                </button>
              </div>

              <!-- Mobile view toggle -->
              <div class="md:hidden text-center mt-4">
                <button class="view-all-btn px-3 py-1.5 text-xs bg-gray-100 dark:bg-gray-800 border border-gray-300 dark:border-gray-700 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors">
                  View All Dates
                </button>
              </div>

              <!-- Mobile list view -->
              <div class="md:hidden mobile-dates-list mt-4 hidden space-y-2">
                {sortedDates.map((dateItem, index) => {
                  const eventType = getEventType(dateItem.event);
                  const isHighlighted = dateItem.isHighlighted;
                  const isPassed = dateItem.isPassed;
                  const isCurrent = index === currentEventIndex && !isPassed;

                  return (
                    <div class={`p-2.5 border rounded-lg shadow-sm ${
                      isPassed
                        ? 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800/50'
                        : isCurrent
                          ? 'border-l-2 border-l-amber-400 dark:border-l-amber-500 border-amber-200 dark:border-amber-800/50 bg-white dark:bg-gray-800/70'
                          : 'border-l-2 border-l-indigo-400 dark:border-l-indigo-500 border-indigo-200 dark:border-indigo-800/50 bg-white dark:bg-gray-800/50'
                    }`}>
                      <div class="flex justify-between items-center">
                        <div>
                          <h3 class={`text-sm font-medium ${
                            isPassed
                              ? 'text-gray-500 dark:text-gray-400'
                              : isCurrent
                                ? 'text-amber-700 dark:text-amber-300'
                                : 'text-indigo-700 dark:text-indigo-300'
                          }`}>
                            {dateItem.event}
                          </h3>
                          <p class="text-xs text-gray-500 dark:text-gray-400 mt-0.5">
                            {formatDateWithSuffix(dateItem.date)}
                          </p>
                        </div>
                        <div class={`flex-shrink-0 ml-2 w-10 h-10 rounded-full flex items-center justify-center ${
                          isPassed
                            ? 'bg-gray-100 dark:bg-gray-800 text-gray-500 dark:text-gray-400'
                            : isCurrent
                              ? 'bg-amber-50 dark:bg-amber-900/30 text-amber-700 dark:text-amber-300'
                              : 'bg-indigo-50 dark:bg-indigo-900/30 text-indigo-700 dark:text-indigo-300'
                        }`}>
                          <div class="text-center">
                            <span class="text-sm font-bold">{new Date(dateItem.date).getDate()}</span>
                            <span class="block text-[8px] uppercase font-medium">{new Date(dateItem.date).toLocaleDateString('en-US', { month: 'short' })}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  );
                })}

                <div class="text-center mt-4">
                  <button class="hide-all-btn px-3 py-1.5 text-xs bg-gray-100 dark:bg-gray-800 border border-gray-300 dark:border-gray-700 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors">
                    Back to Timeline
                  </button>
                </div>
              </div>

              <!-- Current status indicator -->
              <div class="flex items-center justify-center mt-6 text-sm">
                <div class="relative">
                  <div class="flex items-center space-x-1">
                    <div class={`w-2 h-2 rounded-full animate-pulse ${sortedDates[currentEventIndex]?.isPassed ? 'bg-gray-400' : 'bg-amber-500'}`}></div>
                    <span class="text-gray-600 dark:text-gray-300">
                      {sortedDates[currentEventIndex]?.isPassed
                        ? "Next deadline:"
                        : "Current phase:"}
                    </span>
                    <span class={`font-medium ${sortedDates[currentEventIndex]?.isPassed
                      ? 'text-indigo-600 dark:text-indigo-400'
                      : 'text-amber-600 dark:text-amber-400'}`}>
                      {sortedDates[currentEventIndex]?.event || "All dates passed"}
                    </span>
                  </div>
                </div>
              </div>
            </>
          ) : (
            <!-- No data placeholder -->
            <div class="text-center py-6">
              <p class="text-sm text-gray-500 dark:text-gray-400">No dates available yet. Check back soon!</p>
            </div>
          )}
        </div>
      </section>

      <!-- Clean grid for all dates -->
      <section class="mt-12">
        <h2 class="text-xl font-semibold text-center mb-6">All Conference Dates</h2>
        <div class="max-w-3xl mx-auto">
          <div class="grid gap-3 sm:grid-cols-2">
            {sortedDates.map((dateItem, index) => {
              const isHighlighted = dateItem.isHighlighted;
              const isPassed = dateItem.isPassed;
              const isCurrent = index === currentEventIndex && !isPassed;

              return (
                <div class={`p-3 rounded-lg border ${
                  isPassed
                    ? 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800'
                    : isCurrent
                      ? 'border-amber-200 dark:border-amber-700 bg-amber-50/50 dark:bg-amber-900/10'
                      : 'border-indigo-200 dark:border-indigo-700 bg-indigo-50/50 dark:bg-indigo-900/10'
                }`}>
                  <div class="flex justify-between items-center">
                    <div>
                      <h3 class="font-medium">{dateItem.event}</h3>
                      <p class="text-xs text-gray-600 dark:text-gray-400 mt-0.5">{formatDateWithSuffix(dateItem.date)}</p>
                    </div>
                    <div class={`px-2 py-1 rounded text-xs font-medium ${
                      isPassed
                        ? 'text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700'
                        : isCurrent
                          ? 'text-amber-700 dark:text-amber-300 bg-amber-100 dark:bg-amber-900/20'
                          : 'text-indigo-700 dark:text-indigo-300 bg-indigo-100 dark:bg-indigo-900/20'
                    }`}>
                      {isPassed ? 'Past' : isCurrent ? 'Current' : 'Upcoming'}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </section>
    </div>
  </main>
</BaseLayout>

<style>
  /* Hide scrollbar but keep functionality */
  .hide-scrollbar {
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE/Edge */
  }

  .hide-scrollbar::-webkit-scrollbar {
    display: none; /* Chrome, Safari, Opera */
  }

  /* Smooth transitions */
  .timeline-node {
    transition: all 0.2s ease-in-out;
  }

  /* Snap scrolling for mobile */
  @media (max-width: 768px) {
    .timeline-scroll {
      scroll-snap-type: x mandatory;
      scroll-behavior: smooth;
    }

    .timeline-node {
      scroll-snap-align: center;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const timelineScroll = document.getElementById('timeline-scroll');
    const scrollLeftBtn = document.getElementById('scroll-left');
    const scrollRightBtn = document.getElementById('scroll-right');
    const viewAllBtn = document.querySelector('.view-all-btn');
    const hideAllBtn = document.querySelector('.hide-all-btn');
    const timelineContainer = document.querySelector('.timeline-container');
    const mobileList = document.querySelector('.mobile-dates-list');

    // Scroll control functions
    if (scrollLeftBtn && scrollRightBtn && timelineScroll) {
      // Calculate scroll amount (approximately one event)
      const scrollAmount = 110; // Base width + margins

      scrollLeftBtn.addEventListener('click', () => {
        timelineScroll.scrollBy({
          left: -scrollAmount,
          behavior: 'smooth'
        });
      });

      scrollRightBtn.addEventListener('click', () => {
        timelineScroll.scrollBy({
          left: scrollAmount,
          behavior: 'smooth'
        });
      });
    }

    // Mobile view toggle
    if (viewAllBtn && hideAllBtn && timelineContainer && mobileList) {
      viewAllBtn.addEventListener('click', function() {
        timelineContainer.classList.add('hidden');
        viewAllBtn.classList.add('hidden');
        mobileList.classList.remove('hidden');
      });

      hideAllBtn.addEventListener('click', function() {
        timelineContainer.classList.remove('hidden');
        viewAllBtn.classList.remove('hidden');
        mobileList.classList.add('hidden');
      });
    }

    // Scroll to current event
    if (timelineScroll) {
      setTimeout(() => {
        try {
          // Find the current event (with amber marker)
          const currentEvent = timelineScroll.querySelector('.bg-amber-500') ||
                              timelineScroll.querySelector('.bg-amber-400');

          if (currentEvent) {
            // Find the parent node
            const currentNode = currentEvent.closest('.timeline-node');
            if (currentNode) {
              // Calculate the scroll position to center this node
              const nodeRect = currentNode.getBoundingClientRect();
              const containerRect = timelineScroll.getBoundingClientRect();
              const centerPosition = currentNode.offsetLeft - containerRect.width / 2 + nodeRect.width / 2;

              // Smooth scroll to that position
              timelineScroll.scrollTo({
                left: centerPosition,
                behavior: 'smooth'
              });
            }
          }
        } catch (e) {
          console.error("Error scrolling timeline:", e);
        }
      }, 300);

      // Enable horizontal scroll with mouse wheel
      timelineScroll.addEventListener('wheel', function(e) {
        if (e.deltaY !== 0) {
          e.preventDefault();
          this.scrollLeft += e.deltaY;
        }
      });
    }
  });
</script>

