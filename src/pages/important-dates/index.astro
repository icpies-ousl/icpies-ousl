---
import BaseLayout from "@/layouts/BaseLayout.astro";

// Define your conference dates directly in the page
const conferenceDates = [
  {event: "Call for Abstracts", date: "2025-03-15", isPassed: false, isHighlighted: true},
  {event: "Deadline for Abstracts Submission", date: "2025-04-04", isPassed: false, isHighlighted: false},
  {event: "Notification of Acceptance", date: "2025-05-02", isPassed: false},
  {event: "Deadline for Selected Full Papers Submission", date: "2025-06-06", isPassed: false, isHighlighted: false},
  {event: "Camera-ready Copy Submission", date: "2025-06-20", isPassed: false, isHighlighted: false},
  {event: "Early Bird Registration", date: "2025-07-06", isPassed: false, isHighlighted: false},
  {event: "Registration Deadline", date: "2025-07-18", isPassed: false, isHighlighted: false},
];

// Helper to check if a date has passed
const isDatePassed = (dateStr: string) => {
  const today = new Date();
  const itemDate = new Date(dateStr);
  return today > itemDate;
};

// Process dates and add status
const processedDates = conferenceDates.map(date => ({
  ...date,
  isPassed: date.isPassed !== undefined ? date.isPassed : isDatePassed(date.date)
}));

// Sort dates chronologically
const sortedDates = [...processedDates].sort((a, b) => {
  return new Date(a.date).getTime() - new Date(b.date).getTime();
});

// Format date for display
const formatDateWithSuffix = (dateStr: string) => {
  try {
    const date = new Date(dateStr);
    if (isNaN(date.getTime())) return dateStr;

    const day = date.getDate();
    const suffix = day % 10 === 1 && day !== 11 ? 'st' : day % 10 === 2 && day !== 12 ? 'nd' : day % 10 === 3 && day !== 13 ? 'rd' : 'th';
    return date.toLocaleDateString('en-US', { day: 'numeric', month: 'long', year: 'numeric' }).replace(/\d+/, day + suffix);
  } catch (e) {
    console.error("Error formatting date:", e);
    return dateStr;
  }
};

// Format short date
const formatShortDate = (dateStr: string) => {
  try {
    const date = new Date(dateStr);
    if (isNaN(date.getTime())) return dateStr;
    return date.toLocaleDateString('en-US', { day: '2-digit', month: 'short' });
  } catch (e) {
    console.error("Error formatting short date:", e);
    return dateStr;
  }
};

// Get event type based on event name
const getEventType = (eventName: string) => {
  if (!eventName) return "standard";
  if (eventName.includes("Camera-ready") || eventName.includes("Early Bird") || eventName.includes("Registration")) {
    return "physical";
  }
  return "standard";
};

// Calculate progress percentage
const calculateProgress = () => {
  if (sortedDates.length <= 1) return 100;
  const firstDate = new Date(sortedDates[0].date).getTime();
  const lastDate = new Date(sortedDates[sortedDates.length - 1].date).getTime();
  const today = new Date().getTime();
  if (today <= firstDate) return 0;
  if (today >= lastDate) return 100;
  return Math.floor(((today - firstDate) / (lastDate - firstDate)) * 100);
};

const progressPercentage = calculateProgress();

// Find today's closest event
const findCurrentEventIndex = () => {
  const today = new Date().getTime();
  for (let i = 0; i < sortedDates.length; i++) {
    if (new Date(sortedDates[i].date).getTime() > today) {
      return i === 0 ? 0 : i - 1;
    }
  }
  return sortedDates.length - 1;
};

const currentEventIndex = findCurrentEventIndex();

// If there are no dates, we'll show a placeholder message
const hasData = sortedDates.length > 0;

// SEO props for the page
const seo = {
  title: "Important Dates | ICPIES Conference",
  description: "Important dates and deadlines for ICPIES 2025 conference submissions and registration."
};
---

<BaseLayout seo={seo}>
  <main class="py-16 md:py-24">
    <div class="max-w-5xl mx-auto px-4">
      <h1 class="text-3xl md:text-4xl font-bold text-center mb-6">Important Conference Dates</h1>
      <p class="text-lg text-center text-gray-600 dark:text-gray-300 mb-10 max-w-2xl mx-auto">
        Mark your calendar for these key deadlines to ensure you don't miss any important submission dates.
      </p>

     
      <!-- Clean grid for all dates -->
      <section class="mt-12">
        <h2 class="text-xl font-semibold text-center mb-6">All Conference Dates</h2>
        <div class="max-w-3xl mx-auto">
          <div class="grid gap-3 sm:grid-cols-2">
            {sortedDates.map((dateItem, index) => {
              const isHighlighted = dateItem.isHighlighted;
              const isPassed = dateItem.isPassed;
              const isCurrent = index === currentEventIndex && !isPassed;

              return (
                <div class={`p-3 rounded-lg border ${
                  isPassed
                    ? 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800'
                    : isCurrent
                      ? 'border-amber-200 dark:border-amber-700 bg-amber-50/50 dark:bg-amber-900/10'
                      : 'border-indigo-200 dark:border-indigo-700 bg-indigo-50/50 dark:bg-indigo-900/10'
                }`}>
                  <div class="flex justify-between items-center">
                    <div>
                      <h3 class="font-medium">{dateItem.event}</h3>
                      <p class="text-xs text-gray-600 dark:text-gray-400 mt-0.5">{formatDateWithSuffix(dateItem.date)}</p>
                    </div>
                    <div class={`px-2 py-1 rounded text-xs font-medium ${
                      isPassed
                        ? 'text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700'
                        : isCurrent
                          ? 'text-amber-700 dark:text-amber-300 bg-amber-100 dark:bg-amber-900/20'
                          : 'text-indigo-700 dark:text-indigo-300 bg-indigo-100 dark:bg-indigo-900/20'
                    }`}>
                      {isPassed ? 'Past' : isCurrent ? 'Current' : 'Upcoming'}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </section>
    </div>
  </main>
</BaseLayout>

<style>
  /* Hide scrollbar but keep functionality */
  .hide-scrollbar {
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE/Edge */
  }

  .hide-scrollbar::-webkit-scrollbar {
    display: none; /* Chrome, Safari, Opera */
  }

  /* Smooth transitions */
  .timeline-node {
    transition: all 0.2s ease-in-out;
  }

  /* Snap scrolling for mobile */
  @media (max-width: 768px) {
    .timeline-scroll {
      scroll-snap-type: x mandatory;
      scroll-behavior: smooth;
    }

    .timeline-node {
      scroll-snap-align: center;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const timelineScroll = document.getElementById('timeline-scroll');
    const scrollLeftBtn = document.getElementById('scroll-left');
    const scrollRightBtn = document.getElementById('scroll-right');
    const viewAllBtn = document.querySelector('.view-all-btn');
    const hideAllBtn = document.querySelector('.hide-all-btn');
    const timelineContainer = document.querySelector('.timeline-container');
    const mobileList = document.querySelector('.mobile-dates-list');

    // Scroll control functions
    if (scrollLeftBtn && scrollRightBtn && timelineScroll) {
      // Calculate scroll amount (approximately one event)
      const scrollAmount = 110; // Base width + margins

      scrollLeftBtn.addEventListener('click', () => {
        timelineScroll.scrollBy({
          left: -scrollAmount,
          behavior: 'smooth'
        });
      });

      scrollRightBtn.addEventListener('click', () => {
        timelineScroll.scrollBy({
          left: scrollAmount,
          behavior: 'smooth'
        });
      });
    }

    // Mobile view toggle
    if (viewAllBtn && hideAllBtn && timelineContainer && mobileList) {
      viewAllBtn.addEventListener('click', function() {
        timelineContainer.classList.add('hidden');
        viewAllBtn.classList.add('hidden');
        mobileList.classList.remove('hidden');
      });

      hideAllBtn.addEventListener('click', function() {
        timelineContainer.classList.remove('hidden');
        viewAllBtn.classList.remove('hidden');
        mobileList.classList.add('hidden');
      });
    }

    // Scroll to current event
    if (timelineScroll) {
      setTimeout(() => {
        try {
          // Find the current event (with amber marker)
          const currentEvent = timelineScroll.querySelector('.bg-amber-500') ||
                              timelineScroll.querySelector('.bg-amber-400');

          if (currentEvent) {
            // Find the parent node
            const currentNode = currentEvent.closest('.timeline-node');
            if (currentNode) {
              // Calculate the scroll position to center this node
              const nodeRect = currentNode.getBoundingClientRect();
              const containerRect = timelineScroll.getBoundingClientRect();
              const centerPosition = currentNode.offsetLeft - containerRect.width / 2 + nodeRect.width / 2;

              // Smooth scroll to that position
              timelineScroll.scrollTo({
                left: centerPosition,
                behavior: 'smooth'
              });
            }
          }
        } catch (e) {
          console.error("Error scrolling timeline:", e);
        }
      }, 300);

      // Enable horizontal scroll with mouse wheel
      timelineScroll.addEventListener('wheel', function(e) {
        if (e.deltaY !== 0) {
          e.preventDefault();
          this.scrollLeft += e.deltaY;
        }
      });
    }
  });
</script>

